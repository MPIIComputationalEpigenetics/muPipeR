% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipR-class.R
\docType{class}
\name{PipR-class}
\alias{PipR-class}
\alias{PipR}
\alias{intialize,PipR-method}
\title{PipR}
\usage{
PipR(baseDir)
}
\arguments{
\item{baseDir}{base directory for the pipeline}
}
\description{
A class for managing analysis pipelines
}
\details{
When constructing \code{PipR} objects, a base directory will be created that
contains subdirectories for the pipeline status, log files, analysis results
and temporary files.
Internally a graph representation of the pipeline is used for handling
dependencies between jobs.
See the package vignette for examples and more details.
}
\section{Slots}{

\describe{
  \item{\code{baseDir}}{
	Base directory for the analysis pipeline
  }
  \item{\code{logDir}}{
	Directory containing log files orginating from executing the analysis pipeline
  }
  \item{\code{resultDir}}{
	Directory containing results orginating from executing the analysis pipeline.
     This directory will contain subdirectories for each analysis step
  }
  \item{\code{statusDir}}{
	Directory where status information on the execution of the pipeline will
     be stored. This includes the \code{PipR} object itself and a graphical overview
  }
  \item{\code{tempDir}}{
	Directory containing temporary files orginating from executing the analysis pipeline
  }
  \item{\code{idHash}}{
	A (most likely) unique hash string identifying the anlysis pipeline
  }
  \item{\code{steps}}{
	A list containing details on the steps registered for the analysis pipeline.
     This list contains list with elements corresponding to job details, i.e.
     job name, status, result directory and associated \code{\linkS4class{Job}}
     and \code{\linkS4class{JobResult}} objects.
  }
  \item{\code{graph}}{
	\code{igraph} graph representation storing all steps in the pipeline as nodes
     and step dependencies as edges.
  }
}
}

\section{Methods}{

\describe{
   \item{\code{\link{getDir,PipR-method}}}{
     Getter for the base and subdirectories
   }
   \item{\code{\link{addStep,PipR-method}}}{
     Add an analysis step to the pipeline and register it for being executed.
   }
   \item{\code{\link{getSteps,PipR-method}}}{
     Get the names of analysis steps in the pipeline.
   }
   \item{\code{\link{run,PipR-method}}}{
     Run the analysis pipeline executing all registered, incomplete steps.
   }
   \item{\code{\link{getGraph,PipR-method}}}{
     Get a graph representation storing all steps in the pipeline as nodes
     and step dependencies as edges.
   }
   \item{\code{\link{getGraph,PipR-method}}}{
     Plot the graph representation of the pipeline.
   }
   \item{\code{\link{initializePipeDir,PipR-method}}}{
     Create the pipeline directory and it's subdirectories.
   }
   \item{\code{\link{changePipeDir,PipR-method}}}{
     Change the pipeline directory.
   }
   \item{\code{\link{cleanup,PipR-method}}}{
     Remove temproary and uninformative files.
   }
   \item{\code{\link{resetStep,PipR-method}}}{
     Undo a pipeline step and its dependend steps resetting its results.
   }
}
}

\author{
Fabian Mueller
}
